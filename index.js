const express = require('express');
const fs = require('fs');
const path = require('path');
const multer = require('multer');
const crypto = require('crypto');
const { Client } = require('@line/bot-sdk');
const OpenAI = require('openai');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// === LINE Config ===
const lineConfig = {
  channelAccessToken: process.env.LINE_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET,
};
const lineClient = new Client(lineConfig);

// === OpenAI Config ===
const openai = new OpenAI({
  apiKey: process.env.GPT_API_KEY,
});

// === Middlewares ===
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
const upload = multer({ dest: 'uploads/' });

const rawBodySaver = (req, res, buf) => {
  req.rawBody = buf;
};
app.use('/webhook', express.raw({ type: '*/*', verify: rawBodySaver }));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// === Settings ===
const settingsPath = path.join(__dirname, 'setting.json');
let settings = { prompt: '', keywords: [], flex_templates: {} };
function loadSettings() {
  try {
    const data = fs.readFileSync(settingsPath, 'utf8');
    settings = JSON.parse(data);
    console.log('‚úÖ Settings loaded successfully');
  } catch (err) {
    console.error('‚ùå Error loading settings.json:', err.message);
  }
}
loadSettings();

// === Validate LINE Signature ===
function validateSignature(rawBody, secret, signature) {
  const hash = crypto
    .createHmac('SHA256', secret)
    .update(rawBody)
    .digest('base64');
  return hash === signature;
}

// === Webhook ===
app.post('/webhook', async (req, res) => {
  const signature = req.headers['x-line-signature'];
  if (!validateSignature(req.rawBody, lineConfig.channelSecret, signature)) {
    return res.status(401).send('Invalid signature');
  }
  let body;
  try {
    body = JSON.parse(req.rawBody.toString());
  } catch (err) {
    return res.status(400).send('Invalid JSON');
  }
  Promise.all(body.events.map(handleEvent))
    .then((result) => res.json(result))
    .catch((err) => {
      console.error('‚ùå Webhook Error:', err);
      res.status(500).end();
    });
});

// === Handle LINE Message (Updated for Multiple Responses) ===
async function handleEvent(event) {
  if (event.type !== 'message' || event.message.type !== 'text') return;

  const userMsg = event.message.text.toLowerCase();

  // === ‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Flex Message ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Keyword ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
  for (const item of settings.keywords) {
    const match = item.keywords.find((kw) => userMsg.includes(kw.toLowerCase()));
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ "‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö" (responses) ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (match && item.responses && item.responses.length > 0 && settings.flex_templates[item.type]) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
      const messages = item.responses.map(response => ({
        type: 'flex',
        altText: response.text || '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà', // Alt text ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        contents: JSON.parse(
          JSON.stringify(settings.flex_templates[item.type])
            .replace(/{{image}}/g, response.image || '') // ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏∏‡∏î
            .replace(/{{text}}/g, response.text || '')   // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏∏‡∏î
        ),
      }));
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 bubbles)
      return lineClient.replyMessage(event.replyToken, messages);
    }
  }

  // === ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ keyword ‚Üí ‡πÉ‡∏ä‡πâ GPT ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
  try {
    const gptRes = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        { role: 'system', content: settings.prompt || '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ PG DOG' },
        { role: 'user', content: event.message.text },
      ],
    });
    const gptReply = gptRes.choices[0].message.content;
    return lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: gptReply,
    });
  } catch (err) {
    console.error('‚ùå GPT API Error:', err.message);
    return lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Ñ‡πà‡∏∞',
    });
  }
}

// === Admin Panel ===
app.get('/admin', (req, res) => {
  res.sendFile(path.join(__dirname, 'admin.html'));
});

app.get('/admin/settings', (req, res) => {
  res.json(settings);
});

app.post('/admin/settings', (req, res) => {
  const { prompt, keywords, flex_templates } = req.body;
  settings.prompt = prompt || settings.prompt;
  settings.keywords = keywords || settings.keywords;
  settings.flex_templates = flex_templates || settings.flex_templates;

  try {
    fs.writeFileSync(settingsPath, JSON.stringify(settings, null, 2), 'utf8');
    loadSettings();
    res.sendStatus(200);
  } catch (err) {
    console.error('‚ùå Save settings error:', err.message);
    res.status(500).send('Save failed');
  }
});

// === Upload Route ===
app.post('/upload', upload.array('images'), (req, res) => {
  const urls = req.files.map((file) => {
    return `${req.protocol}://${req.get('host')}/uploads/${file.filename}`;
  });
  res.json({ urls });
});

// === Start Server ===
app.listen(PORT, () => {
  console.log(`üöÄ Server running on http://localhost:${PORT}`);
});


// const express = require('express');
// const fs = require('fs');
// const path = require('path');
// const multer = require('multer');
// const crypto = require('crypto');
// const { Client } = require('@line/bot-sdk');
// const OpenAI = require('openai');
// require('dotenv').config();

// const app = express();
// const PORT = process.env.PORT || 3000;

// // === LINE Config ===
// // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Access Token ‡πÅ‡∏•‡∏∞ Channel Secret ‡∏à‡∏≤‡∏Å Environment Variables
// const lineConfig = {
//   channelAccessToken: process.env.LINE_ACCESS_TOKEN,
//   channelSecret: process.env.LINE_CHANNEL_SECRET,
// };
// const lineClient = new Client(lineConfig);

// // === OpenAI Config (Updated for v4 and Railway) ===
// // ‡∏™‡∏£‡πâ‡∏≤‡∏á Client ‡∏Ç‡∏≠‡∏á OpenAI ‡πÇ‡∏î‡∏¢‡∏î‡∏∂‡∏á API Key ‡∏à‡∏≤‡∏Å Environment Variables
// // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô GPT_API_KEY ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå .env ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
// const openai = new OpenAI({
//   apiKey: process.env.GPT_API_KEY,
// });

// // === Middlewares ===
// // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads ‡πÑ‡∏î‡πâ
// app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
// const upload = multer({ dest: 'uploads/' });

// // Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å raw body ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏Ç‡∏≠‡∏á LINE
// const rawBodySaver = (req, res, buf) => {
//   req.rawBody = buf;
// };
// app.use('/webhook', express.raw({ type: '*/*', verify: rawBodySaver }));
// app.use(express.json());
// app.use(express.urlencoded({ extended: true }));

// // === Settings ===
// // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå setting.json
// const settingsPath = path.join(__dirname, 'setting.json');
// let settings = { prompt: '', keywords: [], flex_templates: {} };
// function loadSettings() {
//   try {
//     const data = fs.readFileSync(settingsPath, 'utf8');
//     settings = JSON.parse(data);
//     console.log('‚úÖ Settings loaded successfully');
//   } catch (err) {
//     console.error('‚ùå Error loading settings.json:', err.message);
//   }
// }
// loadSettings(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

// // === Validate LINE Signature ===
// // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô (Signature) ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å LINE
// function validateSignature(rawBody, secret, signature) {
//   const hash = crypto
//     .createHmac('SHA256', secret)
//     .update(rawBody)
//     .digest('base64');
//   return hash === signature;
// }

// // === Webhook ===
// // path ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å LINE
// app.post('/webhook', async (req, res) => {
//   const signature = req.headers['x-line-signature'];
//   if (!validateSignature(req.rawBody, lineConfig.channelSecret, signature)) {
//     return res.status(401).send('Invalid signature');
//   }

//   let body;
//   try {
//     body = JSON.parse(req.rawBody.toString());
//   } catch (err) {
//     return res.status(400).send('Invalid JSON');
//   }

//   // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å event ‡∏ó‡∏µ‡πà LINE ‡∏™‡πà‡∏á‡∏°‡∏≤
//   Promise.all(body.events.map(handleEvent))
//     .then((result) => res.json(result))
//     .catch((err) => {
//       console.error('‚ùå Webhook Error:', err);
//       res.status(500).end();
//     });
// });

// // === Handle LINE Message (Updated) ===
// // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤
// async function handleEvent(event) {
//   if (event.type !== 'message' || event.message.type !== 'text') return;

//   const userMsg = event.message.text.toLowerCase();

//   // === ‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Flex Message ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Keyword ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
//   for (const item of settings.keywords) {
//     const match = item.keywords.find((kw) => userMsg.includes(kw.toLowerCase()));
//     if (match && settings.flex_templates[item.type]) {
//       const messages = item.images.map((imgUrl) => ({
//         type: 'flex',
//         altText: item.text || 'Flex message',
//         contents: JSON.parse(
//           JSON.stringify(settings.flex_templates[item.type])
//             .replace(/{{image}}/g, imgUrl)
//             .replace(/{{text}}/g, item.text || '')
//         ),
//       }));
//       return lineClient.replyMessage(event.replyToken, messages);
//     }
//   }

//   // === ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ keyword ‚Üí ‡πÉ‡∏ä‡πâ GPT ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
//   try {
//     // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API ‡∏Ç‡∏≠‡∏á OpenAI ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
//     const gptRes = await openai.chat.completions.create({
//       model: 'gpt-4o-mini',
//       messages: [
//         { role: 'system', content: settings.prompt || '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ PG DOG' },
//         { role: 'user', content: event.message.text },
//       ],
//     });

//     // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
//     const gptReply = gptRes.choices[0].message.content;

//     return lineClient.replyMessage(event.replyToken, {
//       type: 'text',
//       text: gptReply,
//     });

//   } catch (err) {
//     console.error('‚ùå GPT API Error:', err.message);
//     return lineClient.replyMessage(event.replyToken, {
//       type: 'text',
//       text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Ñ‡πà‡∏∞',
//     });
//   }
// }

// // === Admin Panel ===
// // ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
// app.get('/admin', (req, res) => {
//   res.sendFile(path.join(__dirname, 'admin.html'));
// });

// // API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
// app.get('/admin/settings', (req, res) => {
//   res.json(settings);
// });

// // API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
// app.post('/admin/settings', (req, res) => {
//   const { prompt, keywords, flex_templates } = req.body;
//   settings.prompt = prompt || settings.prompt;
//   settings.keywords = keywords || settings.keywords;
//   settings.flex_templates = flex_templates || settings.flex_templates;

//   try {
//     fs.writeFileSync(settingsPath, JSON.stringify(settings, null, 2), 'utf8');
//     loadSettings(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
//     res.sendStatus(200);
//   } catch (err) {
//     console.error('‚ùå Save settings error:', err.message);
//     res.status(500).send('Save failed');
//   }
// });

// // === Upload Route ===
// // (Optional) path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
// app.post('/upload', upload.array('images'), (req, res) => {
//   const urls = req.files.map((file) => {
//     return `${req.protocol}://${req.get('host')}/uploads/${file.filename}`;
//   });
//   res.json({ urls });
// });

// // === Start Server ===
// // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
// app.listen(PORT, () => {
//   console.log(`üöÄ Server running on http://localhost:${PORT}`);
// });
